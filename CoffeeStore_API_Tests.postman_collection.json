{
	"info": {
		"_postman_id": "coffee-store-api-tests",
		"name": "CoffeeStore API Tests",
		"description": "Comprehensive API tests for CoffeeStore application with authentication, paging, sorting, searching, field selection, status codes, JSON schema validation, data checks, and edge cases.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Register New User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test status code",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test response structure",
									"pm.test(\"Response has required fields\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('Succeeded');",
									"    pm.expect(response).to.have.property('Message');",
									"    pm.expect(response).to.have.property('AccessToken');",
									"    pm.expect(response).to.have.property('RefreshToken');",
									"});",
									"",
									"// Test successful registration",
									"pm.test(\"Registration succeeded\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.Succeeded).to.be.true;",
									"});",
									"",
									"// Save tokens for later use",
									"const response = pm.response.json();",
									"if (response.AccessToken && response.RefreshToken) {",
									"    pm.environment.set(\"accessToken\", response.AccessToken);",
									"    pm.environment.set(\"refreshToken\", response.RefreshToken);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"{{$randomEmail}}\",\n  \"password\": \"TestPass123!\",\n  \"fullName\": \"{{$randomFullName}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test status code",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test response structure",
									"pm.test(\"Response has required fields\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('Succeeded');",
									"    pm.expect(response).to.have.property('Message');",
									"    pm.expect(response).to.have.property('AccessToken');",
									"    pm.expect(response).to.have.property('RefreshToken');",
									"});",
									"",
									"// Test successful login",
									"pm.test(\"Login succeeded\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.Succeeded).to.be.true;",
									"});",
									"",
									"// Save tokens for later use",
									"const response = pm.response.json();",
									"if (response.AccessToken && response.RefreshToken) {",
									"    pm.environment.set(\"accessToken\", response.AccessToken);",
									"    pm.environment.set(\"refreshToken\", response.RefreshToken);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"{{adminEmail}}\",\n  \"password\": \"{{adminPassword}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Refresh Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test status code",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test response structure",
									"pm.test(\"Response has required fields\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('Succeeded');",
									"    pm.expect(response).to.have.property('Message');",
									"    pm.expect(response).to.have.property('AccessToken');",
									"    pm.expect(response).to.have.property('RefreshToken');",
									"});",
									"",
									"// Test successful token refresh",
									"pm.test(\"Token refresh succeeded\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.Succeeded).to.be.true;",
									"});",
									"",
									"// Save new tokens",
									"const response = pm.response.json();",
									"if (response.AccessToken && response.RefreshToken) {",
									"    pm.environment.set(\"accessToken\", response.AccessToken);",
									"    pm.environment.set(\"refreshToken\", response.RefreshToken);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"refreshToken\": \"{{refreshToken}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/refresh",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"refresh"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test status code",
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"// Clear tokens after logout",
									"pm.environment.unset(\"accessToken\");",
									"pm.environment.unset(\"refreshToken\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"refreshToken\": \"{{refreshToken}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "Unauthorized Access - No Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test status code",
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/products",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Forbidden Access - Invalid Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test status code",
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer invalid_token_here",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/products",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"products"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Products",
			"item": [
				{
					"name": "Get All Products - Paging",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test status code",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse response",
									"const response = pm.response.json();",
									"",
									"// Test response structure",
									"pm.test(\"Response has paged structure\", function () {",
									"    pm.expect(response).to.have.property('items');",
									"    pm.expect(response).to.have.property('page');",
									"    pm.expect(response).to.have.property('pageSize');",
									"    pm.expect(response).to.have.property('totalCount');",
									"    pm.expect(response).to.have.property('totalPages');",
									"});",
									"",
									"// Test paging values",
									"pm.test(\"Page is 1\", function () {",
									"    pm.expect(response.page).to.eql(1);",
									"});",
									"",
									"pm.test(\"PageSize is 10\", function () {",
									"    pm.expect(response.pageSize).to.eql(10);",
									"});",
									"",
									"pm.test(\"Items array exists\", function () {",
									"    pm.expect(response.items).to.be.an('array');",
									"});",
									"",
									"// Test that items count doesn't exceed pageSize",
									"pm.test(\"Items count within page size\", function () {",
									"    pm.expect(response.items.length).to.be.at.most(response.pageSize);",
									"});",
									"",
									"// Test totalPages calculation",
									"pm.test(\"TotalPages calculated correctly\", function () {",
									"    const expectedTotalPages = Math.ceil(response.totalCount / response.pageSize);",
									"    pm.expect(response.totalPages).to.eql(expectedTotalPages);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/products?page=1&pageSize=10",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"products"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "pageSize",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Products - Sorting",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test status code",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse response",
									"const response = pm.response.json();",
									"",
									"// Test response structure",
									"pm.test(\"Response has paged structure\", function () {",
									"    pm.expect(response).to.have.property('items');",
									"    pm.expect(response).to.have.property('page');",
									"    pm.expect(response).to.have.property('pageSize');",
									"    pm.expect(response).to.have.property('totalCount');",
									"    pm.expect(response).to.have.property('totalPages');",
									"});",
									"",
									"// Test sorting (ascending by name)",
									"pm.test(\"Products sorted ascending by name\", function () {",
									"    if (response.items.length > 1) {",
									"        for (let i = 0; i < response.items.length - 1; i++) {",
									"            const currentName = response.items[i].name.toLowerCase();",
									"            const nextName = response.items[i + 1].name.toLowerCase();",
									"            pm.expect(currentName <= nextName).to.be.true;",
									"        }",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/products?sort=name&page=1&pageSize=10",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"products"
							],
							"query": [
								{
									"key": "sort",
									"value": "name"
								},
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "pageSize",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Products - Searching",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test status code",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse response",
									"const response = pm.response.json();",
									"",
									"// Test response structure",
									"pm.test(\"Response has paged structure\", function () {",
									"    pm.expect(response).to.have.property('items');",
									"    pm.expect(response).to.have.property('page');",
									"    pm.expect(response).to.have.property('pageSize');",
									"    pm.expect(response).to.have.property('totalCount');",
									"    pm.expect(response).to.have.property('totalPages');",
									"});",
									"",
									"// Test search functionality",
									"pm.test(\"Search returns relevant results\", function () {",
									"    if (response.items.length > 0) {",
									"        // Check that at least one item contains search term",
									"        const searchTerm = pm.request.url.query.toObject().search || '';",
									"        if (searchTerm) {",
									"            const hasMatch = response.items.some(item => ",
									"                item.name.toLowerCase().includes(searchTerm.toLowerCase()) ||",
									"                (item.description && item.description.toLowerCase().includes(searchTerm.toLowerCase()))",
									"            );",
									"            pm.expect(hasMatch).to.be.true;",
									"        }",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/products?search=coffee&page=1&pageSize=10",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"products"
							],
							"query": [
								{
									"key": "search",
									"value": "coffee"
								},
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "pageSize",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Products - Field Selection",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test status code",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse response",
									"const response = pm.response.json();",
									"",
									"// Test response structure",
									"pm.test(\"Response has paged structure\", function () {",
									"    pm.expect(response).to.have.property('items');",
									"    pm.expect(response).to.have.property('page');",
									"    pm.expect(response).to.have.property('pageSize');",
									"    pm.expect(response).to.have.property('totalCount');",
									"    pm.expect(response).to.have.property('totalPages');",
									"});",
									"",
									"// Test field selection",
									"pm.test(\"Only selected fields returned\", function () {",
									"    if (response.items.length > 0) {",
									"        const selectedItem = response.items[0];",
									"        const selectedFields = ['name', 'price'];",
									"        ",
									"        // Check that only selected fields exist",
									"        selectedFields.forEach(field => {",
									"            pm.expect(selectedItem).to.have.property(field);",
									"        });",
									"        ",
									"        // Check that unselected fields don't exist (if not essential)",
									"        // Note: Some fields like productId might always be present",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/products?select=name,price&page=1&pageSize=10",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"products"
							],
							"query": [
								{
									"key": "select",
									"value": "name,price"
								},
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "pageSize",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Product By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test status code",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse response",
									"const response = pm.response.json();",
									"",
									"// Test response structure",
									"pm.test(\"Response has product properties\", function () {",
									"    pm.expect(response).to.have.property('productId');",
									"    pm.expect(response).to.have.property('name');",
									"    pm.expect(response).to.have.property('price');",
									"    pm.expect(response).to.have.property('isActive');",
									"});",
									"",
									"// Test actual data values",
									"pm.test(\"Product has valid ID\", function () {",
									"    pm.expect(response.productId).to.be.a('number');",
									"    pm.expect(response.productId).to.be.above(0);",
									"});",
									"",
									"pm.test(\"Product has valid name\", function () {",
									"    pm.expect(response.name).to.be.a('string');",
									"    pm.expect(response.name).to.have.lengthOf.at.least(1);",
									"});",
									"",
									"pm.test(\"Product has valid price\", function () {",
									"    pm.expect(response.price).to.be.a('number');",
									"    pm.expect(response.price).to.be.above(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/products/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"products",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Product By ID - Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test status code",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/products/999999",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"products",
								"999999"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Product - Authorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test status code",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// Parse response",
									"const response = pm.response.json();",
									"",
									"// Test response structure",
									"pm.test(\"Response has product properties\", function () {",
									"    pm.expect(response).to.have.property('productId');",
									"    pm.expect(response).to.have.property('name');",
									"    pm.expect(response).to.have.property('price');",
									"    pm.expect(response).to.have.property('isActive');",
									"    pm.expect(response).to.have.property('categoryId');",
									"});",
									"",
									"// Test actual data values",
									"pm.test(\"Product created with correct values\", function () {",
									"    const requestBody = JSON.parse(pm.request.body.raw);",
									"    pm.expect(response.name).to.eql(requestBody.name);",
									"    pm.expect(response.price).to.eql(requestBody.price);",
									"    pm.expect(response.categoryId).to.eql(requestBody.categoryId);",
									"});",
									"",
									"// Save product ID for later tests",
									"pm.environment.set(\"productId\", response.productId);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Test Coffee {{$timestamp}}\",\n  \"description\": \"Test coffee product for API testing\",\n  \"price\": 12.99,\n  \"isActive\": true,\n  \"categoryId\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/products",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Product - Unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test status code",
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Unauthorized Test Coffee\",\n  \"description\": \"Should fail without auth\",\n  \"price\": 9.99,\n  \"isActive\": true,\n  \"categoryId\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/products",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Product - Invalid Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test status code",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"\",\n  \"description\": \"Invalid product with empty name\",\n  \"price\": -5.00,\n  \"isActive\": true,\n  \"categoryId\": 0\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/products",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Product - Authorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test status code",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse response",
									"const response = pm.response.json();",
									"",
									"// Test response structure",
									"pm.test(\"Response has product properties\", function () {",
									"    pm.expect(response).to.have.property('productId');",
									"    pm.expect(response).to.have.property('name');",
									"    pm.expect(response).to.have.property('price');",
									"    pm.expect(response).to.have.property('isActive');",
									"});",
									"",
									"// Test actual data values",
									"pm.test(\"Product updated with correct values\", function () {",
									"    const requestBody = JSON.parse(pm.request.body.raw);",
									"    pm.expect(response.name).to.eql(requestBody.name);",
									"    pm.expect(response.price).to.eql(requestBody.price);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Updated Test Coffee\",\n  \"description\": \"Updated test coffee product\",\n  \"price\": 15.99,\n  \"isActive\": true,\n  \"categoryId\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/products/{{productId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"products",
								"{{productId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Product - Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test status code",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Non-existent Product\",\n  \"description\": \"Should not be found\",\n  \"price\": 9.99,\n  \"isActive\": true,\n  \"categoryId\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/products/999999",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"products",
								"999999"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Product - Authorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test status code",
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"// Clear product ID",
									"pm.environment.unset(\"productId\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/products/{{productId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"products",
								"{{productId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Product - Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test status code",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/products/999999",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"products",
								"999999"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Categories",
			"item": [
				{
					"name": "Get All Categories - Paging",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test status code",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse response",
									"const response = pm.response.json();",
									"",
									"// Test response structure",
									"pm.test(\"Response has paged structure\", function () {",
									"    pm.expect(response).to.have.property('items');",
									"    pm.expect(response).to.have.property('page');",
									"    pm.expect(response).to.have.property('pageSize');",
									"    pm.expect(response).to.have.property('totalCount');",
									"    pm.expect(response).to.have.property('totalPages');",
									"});",
									"",
									"// Test paging values",
									"pm.test(\"Page is 1\", function () {",
									"    pm.expect(response.page).to.eql(1);",
									"});",
									"",
									"pm.test(\"PageSize is 10\", function () {",
									"    pm.expect(response.pageSize).to.eql(10);",
									"});",
									"",
									"pm.test(\"Items array exists\", function () {",
									"    pm.expect(response.items).to.be.an('array');",
									"});",
									"",
									"// Test that items count doesn't exceed pageSize",
									"pm.test(\"Items count within page size\", function () {",
									"    pm.expect(response.items.length).to.be.at.most(response.pageSize);",
									"});",
									"",
									"// Test totalPages calculation",
									"pm.test(\"TotalPages calculated correctly\", function () {",
									"    const expectedTotalPages = Math.ceil(response.totalCount / response.pageSize);",
									"    pm.expect(response.totalPages).to.eql(expectedTotalPages);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/categories?page=1&pageSize=10",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"categories"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "pageSize",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Categories - Sorting",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test status code",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse response",
									"const response = pm.response.json();",
									"",
									"// Test response structure",
									"pm.test(\"Response has paged structure\", function () {",
									"    pm.expect(response).to.have.property('items');",
									"    pm.expect(response).to.have.property('page');",
									"    pm.expect(response).to.have.property('pageSize');",
									"    pm.expect(response).to.have.property('totalCount');",
									"    pm.expect(response).to.have.property('totalPages');",
									"});",
									"",
									"// Test sorting (descending by name)",
									"pm.test(\"Categories sorted descending by name\", function () {",
									"    if (response.items.length > 1) {",
									"        for (let i = 0; i < response.items.length - 1; i++) {",
									"            const currentName = response.items[i].name.toLowerCase();",
									"            const nextName = response.items[i + 1].name.toLowerCase();",
									"            pm.expect(currentName >= nextName).to.be.true;",
									"        }",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/categories?sort=-name&page=1&pageSize=10",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"categories"
							],
							"query": [
								{
									"key": "sort",
									"value": "-name"
								},
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "pageSize",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Categories - Searching",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test status code",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse response",
									"const response = pm.response.json();",
									"",
									"// Test response structure",
									"pm.test(\"Response has paged structure\", function () {",
									"    pm.expect(response).to.have.property('items');",
									"    pm.expect(response).to.have.property('page');",
									"    pm.expect(response).to.have.property('pageSize');",
									"    pm.expect(response).to.have.property('totalCount');",
									"    pm.expect(response).to.have.property('totalPages');",
									"});",
									"",
									"// Test search functionality",
									"pm.test(\"Search returns relevant results\", function () {",
									"    if (response.items.length > 0) {",
									"        // Check that at least one item contains search term",
									"        const searchTerm = pm.request.url.query.toObject().search || '';",
									"        if (searchTerm) {",
									"            const hasMatch = response.items.some(item => ",
									"                item.name.toLowerCase().includes(searchTerm.toLowerCase()) ||",
									"                (item.description && item.description.toLowerCase().includes(searchTerm.toLowerCase()))",
									"            );",
									"            pm.expect(hasMatch).to.be.true;",
									"        }",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/categories?search=coffee&page=1&pageSize=10",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"categories"
							],
							"query": [
								{
									"key": "search",
									"value": "coffee"
								},
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "pageSize",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Categories - Field Selection",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test status code",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse response",
									"const response = pm.response.json();",
									"",
									"// Test response structure",
									"pm.test(\"Response has paged structure\", function () {",
									"    pm.expect(response).to.have.property('items');",
									"    pm.expect(response).to.have.property('page');",
									"    pm.expect(response).to.have.property('pageSize');",
									"    pm.expect(response).to.have.property('totalCount');",
									"    pm.expect(response).to.have.property('totalPages');",
									"});",
									"",
									"// Test field selection",
									"pm.test(\"Only selected fields returned\", function () {",
									"    if (response.items.length > 0) {",
									"        const selectedItem = response.items[0];",
									"        const selectedFields = ['name'];",
									"        ",
									"        // Check that only selected fields exist",
									"        selectedFields.forEach(field => {",
									"            pm.expect(selectedItem).to.have.property(field);",
									"        });",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/categories?select=name&page=1&pageSize=10",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"categories"
							],
							"query": [
								{
									"key": "select",
									"value": "name"
								},
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "pageSize",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Category By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test status code",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse response",
									"const response = pm.response.json();",
									"",
									"// Test response structure",
									"pm.test(\"Response has category properties\", function () {",
									"    pm.expect(response).to.have.property('categoryId');",
									"    pm.expect(response).to.have.property('name');",
									"});",
									"",
									"// Test actual data values",
									"pm.test(\"Category has valid ID\", function () {",
									"    pm.expect(response.categoryId).to.be.a('number');",
									"    pm.expect(response.categoryId).to.be.above(0);",
									"});",
									"",
									"pm.test(\"Category has valid name\", function () {",
									"    pm.expect(response.name).to.be.a('string');",
									"    pm.expect(response.name).to.have.lengthOf.at.least(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/categories/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"categories",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Category By ID - Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test status code",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/categories/999999",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"categories",
								"999999"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Category - Authorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test status code",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// Parse response",
									"const response = pm.response.json();",
									"",
									"// Test response structure",
									"pm.test(\"Response has category properties\", function () {",
									"    pm.expect(response).to.have.property('categoryId');",
									"    pm.expect(response).to.have.property('name');",
									"});",
									"",
									"// Test actual data values",
									"pm.test(\"Category created with correct values\", function () {",
									"    const requestBody = JSON.parse(pm.request.body.raw);",
									"    pm.expect(response.name).to.eql(requestBody.name);",
									"});",
									"",
									"// Save category ID for later tests",
									"pm.environment.set(\"categoryId\", response.categoryId);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Test Category {{$timestamp}}\",\n  \"description\": \"Test category for API testing\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/categories",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Category - Unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test status code",
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Unauthorized Test Category\",\n  \"description\": \"Should fail without auth\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/categories",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Category - Invalid Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test status code",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"\",\n  \"description\": \"Invalid category with empty name\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/categories",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Category - Authorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test status code",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse response",
									"const response = pm.response.json();",
									"",
									"// Test response structure",
									"pm.test(\"Response has category properties\", function () {",
									"    pm.expect(response).to.have.property('categoryId');",
									"    pm.expect(response).to.have.property('name');",
									"});",
									"",
									"// Test actual data values",
									"pm.test(\"Category updated with correct values\", function () {",
									"    const requestBody = JSON.parse(pm.request.body.raw);",
									"    pm.expect(response.name).to.eql(requestBody.name);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Updated Test Category\",\n  \"description\": \"Updated test category\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/categories/{{categoryId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"categories",
								"{{categoryId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Category - Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test status code",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Non-existent Category\",\n  \"description\": \"Should not be found\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/categories/999999",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"categories",
								"999999"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Category - Authorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test status code",
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"// Clear category ID",
									"pm.environment.unset(\"categoryId\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/categories/{{categoryId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"categories",
								"{{categoryId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Category - Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test status code",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/categories/999999",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"categories",
								"999999"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Orders",
			"item": [
				{
					"name": "Get All Orders - Paging",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test status code",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse response",
									"const response = pm.response.json();",
									"",
									"// Test response structure",
									"pm.test(\"Response has paged structure\", function () {",
									"    pm.expect(response).to.have.property('items');",
									"    pm.expect(response).to.have.property('page');",
									"    pm.expect(response).to.have.property('pageSize');",
									"    pm.expect(response).to.have.property('totalCount');",
									"    pm.expect(response).to.have.property('totalPages');",
									"});",
									"",
									"// Test paging values",
									"pm.test(\"Page is 1\", function () {",
									"    pm.expect(response.page).to.eql(1);",
									"});",
									"",
									"pm.test(\"PageSize is 10\", function () {",
									"    pm.expect(response.pageSize).to.eql(10);",
									"});",
									"",
									"pm.test(\"Items array exists\", function () {",
									"    pm.expect(response.items).to.be.an('array');",
									"});",
									"",
									"// Test that items count doesn't exceed pageSize",
									"pm.test(\"Items count within page size\", function () {",
									"    pm.expect(response.items.length).to.be.at.most(response.pageSize);",
									"});",
									"",
									"// Test totalPages calculation",
									"pm.test(\"TotalPages calculated correctly\", function () {",
									"    const expectedTotalPages = Math.ceil(response.totalCount / response.pageSize);",
									"    pm.expect(response.totalPages).to.eql(expectedTotalPages);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/orders?page=1&pageSize=10",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"orders"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "pageSize",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Orders - Sorting",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test status code",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse response",
									"const response = pm.response.json();",
									"",
									"// Test response structure",
									"pm.test(\"Response has paged structure\", function () {",
									"    pm.expect(response).to.have.property('items');",
									"    pm.expect(response).to.have.property('page');",
									"    pm.expect(response).to.have.property('pageSize');",
									"    pm.expect(response).to.have.property('totalCount');",
									"    pm.expect(response).to.have.property('totalPages');",
									"});",
									"",
									"// Test sorting (ascending by order date)",
									"pm.test(\"Orders sorted ascending by order date\", function () {",
									"    if (response.items.length > 1) {",
									"        for (let i = 0; i < response.items.length - 1; i++) {",
									"            const currentDate = new Date(response.items[i].orderDate);",
									"            const nextDate = new Date(response.items[i + 1].orderDate);",
									"            pm.expect(currentDate <= nextDate).to.be.true;",
									"        }",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/orders?sort=orderDate&page=1&pageSize=10",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"orders"
							],
							"query": [
								{
									"key": "sort",
									"value": "orderDate"
								},
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "pageSize",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Orders - Searching",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test status code",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse response",
									"const response = pm.response.json();",
									"",
									"// Test response structure",
									"pm.test(\"Response has paged structure\", function () {",
									"    pm.expect(response).to.have.property('items');",
									"    pm.expect(response).to.have.property('page');",
									"    pm.expect(response).to.have.property('pageSize');",
									"    pm.expect(response).to.have.property('totalCount');",
									"    pm.expect(response).to.have.property('totalPages');",
									"});",
									"",
									"// Test search functionality",
									"pm.test(\"Search returns relevant results\", function () {",
									"    if (response.items.length > 0) {",
									"        // Check that at least one item contains search term",
									"        const searchTerm = pm.request.url.query.toObject().search || '';",
									"        if (searchTerm) {",
									"            const hasMatch = response.items.some(item => ",
									"                item.status.toLowerCase().includes(searchTerm.toLowerCase())",
									"            );",
									"            pm.expect(hasMatch).to.be.true;",
									"        }",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/orders?search=pending&page=1&pageSize=10",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"orders"
							],
							"query": [
								{
									"key": "search",
									"value": "pending"
								},
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "pageSize",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Orders - Field Selection",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test status code",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse response",
									"const response = pm.response.json();",
									"",
									"// Test response structure",
									"pm.test(\"Response has paged structure\", function () {",
									"    pm.expect(response).to.have.property('items');",
									"    pm.expect(response).to.have.property('page');",
									"    pm.expect(response).to.have.property('pageSize');",
									"    pm.expect(response).to.have.property('totalCount');",
									"    pm.expect(response).to.have.property('totalPages');",
									"});",
									"",
									"// Test field selection",
									"pm.test(\"Only selected fields returned\", function () {",
									"    if (response.items.length > 0) {",
									"        const selectedItem = response.items[0];",
									"        const selectedFields = ['orderId', 'status'];",
									"        ",
									"        // Check that only selected fields exist",
									"        selectedFields.forEach(field => {",
									"            pm.expect(selectedItem).to.have.property(field);",
									"        });",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/orders?select=orderId,status&page=1&pageSize=10",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"orders"
							],
							"query": [
								{
									"key": "select",
									"value": "orderId,status"
								},
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "pageSize",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Order By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test status code",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse response",
									"const response = pm.response.json();",
									"",
									"// Test response structure",
									"pm.test(\"Response has order properties\", function () {",
									"    pm.expect(response).to.have.property('orderId');",
									"    pm.expect(response).to.have.property('userId');",
									"    pm.expect(response).to.have.property('orderDate');",
									"    pm.expect(response).to.have.property('status');",
									"});",
									"",
									"// Test actual data values",
									"pm.test(\"Order has valid ID\", function () {",
									"    pm.expect(response.orderId).to.be.a('number');",
									"    pm.expect(response.orderId).to.be.above(0);",
									"});",
									"",
									"pm.test(\"Order has valid user ID\", function () {",
									"    pm.expect(response.userId).to.be.a('string');",
									"    pm.expect(response.userId).to.have.lengthOf.at.least(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/orders/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"orders",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Order By ID - Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test status code",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/orders/999999",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"orders",
								"999999"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Order - Authorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test status code",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// Parse response",
									"const response = pm.response.json();",
									"",
									"// Test response structure",
									"pm.test(\"Response has order properties\", function () {",
									"    pm.expect(response).to.have.property('orderId');",
									"    pm.expect(response).to.have.property('userId');",
									"    pm.expect(response).to.have.property('orderDate');",
									"    pm.expect(response).to.have.property('status');",
									"});",
									"",
									"// Test actual data values",
									"pm.test(\"Order created with correct values\", function () {",
									"    const requestBody = JSON.parse(pm.request.body.raw);",
									"    pm.expect(response.userId).to.eql(requestBody.userId);",
									"    pm.expect(response.status).to.eql(requestBody.status);",
									"});",
									"",
									"// Save order ID for later tests",
									"pm.environment.set(\"orderId\", response.orderId);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userId\": \"{{userId}}\",\n  \"orderDate\": \"{{$isoTimestamp}}\",\n  \"status\": \"pending\",\n  \"details\": [\n    {\n      \"productId\": 1,\n      \"quantity\": 2,\n      \"unitPrice\": 12.99\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Order - Unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test status code",
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userId\": \"{{userId}}\",\n  \"orderDate\": \"{{$isoTimestamp}}\",\n  \"status\": \"pending\",\n  \"details\": [\n    {\n      \"productId\": 1,\n      \"quantity\": 2,\n      \"unitPrice\": 12.99\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Order - Invalid Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test status code",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userId\": \"\",\n  \"orderDate\": \"invalid-date\",\n  \"status\": \"\",\n  \"details\": []\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Order - Authorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test status code",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse response",
									"const response = pm.response.json();",
									"",
									"// Test response structure",
									"pm.test(\"Response has order properties\", function () {",
									"    pm.expect(response).to.have.property('orderId');",
									"    pm.expect(response).to.have.property('userId');",
									"    pm.expect(response).to.have.property('orderDate');",
									"    pm.expect(response).to.have.property('status');",
									"});",
									"",
									"// Test actual data values",
									"pm.test(\"Order updated with correct values\", function () {",
									"    const requestBody = JSON.parse(pm.request.body.raw);",
									"    pm.expect(response.status).to.eql(requestBody.status);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userId\": \"{{userId}}\",\n  \"orderDate\": \"{{$isoTimestamp}}\",\n  \"status\": \"completed\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/orders/{{orderId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"orders",
								"{{orderId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Order - Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test status code",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userId\": \"{{userId}}\",\n  \"orderDate\": \"{{$isoTimestamp}}\",\n  \"status\": \"cancelled\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/orders/999999",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"orders",
								"999999"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Order - Authorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test status code",
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"// Clear order ID",
									"pm.environment.unset(\"orderId\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/orders/{{orderId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"orders",
								"{{orderId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Order - Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test status code",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/orders/999999",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"orders",
								"999999"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Payments",
			"item": [
				{
					"name": "Get All Payments - Paging",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test status code",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse response",
									"const response = pm.response.json();",
									"",
									"// Test response structure",
									"pm.test(\"Response has paged structure\", function () {",
									"    pm.expect(response).to.have.property('items');",
									"    pm.expect(response).to.have.property('page');",
									"    pm.expect(response).to.have.property('pageSize');",
									"    pm.expect(response).to.have.property('totalCount');",
									"    pm.expect(response).to.have.property('totalPages');",
									"});",
									"",
									"// Test paging values",
									"pm.test(\"Page is 1\", function () {",
									"    pm.expect(response.page).to.eql(1);",
									"});",
									"",
									"pm.test(\"PageSize is 10\", function () {",
									"    pm.expect(response.pageSize).to.eql(10);",
									"});",
									"",
									"pm.test(\"Items array exists\", function () {",
									"    pm.expect(response.items).to.be.an('array');",
									"});",
									"",
									"// Test that items count doesn't exceed pageSize",
									"pm.test(\"Items count within page size\", function () {",
									"    pm.expect(response.items.length).to.be.at.most(response.pageSize);",
									"});",
									"",
									"// Test totalPages calculation",
									"pm.test(\"TotalPages calculated correctly\", function () {",
									"    const expectedTotalPages = Math.ceil(response.totalCount / response.pageSize);",
									"    pm.expect(response.totalPages).to.eql(expectedTotalPages);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/orders/1/payments?page=1&pageSize=10",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"orders",
								"1",
								"payments"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "pageSize",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Payments - Sorting",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test status code",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse response",
									"const response = pm.response.json();",
									"",
									"// Test response structure",
									"pm.test(\"Response has paged structure\", function () {",
									"    pm.expect(response).to.have.property('items');",
									"    pm.expect(response).to.have.property('page');",
									"    pm.expect(response).to.have.property('pageSize');",
									"    pm.expect(response).to.have.property('totalCount');",
									"    pm.expect(response).to.have.property('totalPages');",
									"});",
									"",
									"// Test sorting (descending by payment date)",
									"pm.test(\"Payments sorted descending by payment date\", function () {",
									"    if (response.items.length > 1) {",
									"        for (let i = 0; i < response.items.length - 1; i++) {",
									"            const currentDate = new Date(response.items[i].paymentDate);",
									"            const nextDate = new Date(response.items[i + 1].paymentDate);",
									"            pm.expect(currentDate >= nextDate).to.be.true;",
									"        }",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/orders/1/payments?sort=-paymentDate&page=1&pageSize=10",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"orders",
								"1",
								"payments"
							],
							"query": [
								{
									"key": "sort",
									"value": "-paymentDate"
								},
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "pageSize",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Payments - Searching",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test status code",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse response",
									"const response = pm.response.json();",
									"",
									"// Test response structure",
									"pm.test(\"Response has paged structure\", function () {",
									"    pm.expect(response).to.have.property('items');",
									"    pm.expect(response).to.have.property('page');",
									"    pm.expect(response).to.have.property('pageSize');",
									"    pm.expect(response).to.have.property('totalCount');",
									"    pm.expect(response).to.have.property('totalPages');",
									"});",
									"",
									"// Test search functionality",
									"pm.test(\"Search returns relevant results\", function () {",
									"    if (response.items.length > 0) {",
									"        // Check that at least one item contains search term",
									"        const searchTerm = pm.request.url.query.toObject().search || '';",
									"        if (searchTerm) {",
									"            const hasMatch = response.items.some(item => ",
									"                item.paymentMethod.toLowerCase().includes(searchTerm.toLowerCase())",
									"            );",
									"            pm.expect(hasMatch).to.be.true;",
									"        }",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/orders/1/payments?search=credit&page=1&pageSize=10",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"orders",
								"1",
								"payments"
							],
							"query": [
								{
									"key": "search",
									"value": "credit"
								},
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "pageSize",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Payments - Field Selection",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test status code",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse response",
									"const response = pm.response.json();",
									"",
									"// Test response structure",
									"pm.test(\"Response has paged structure\", function () {",
									"    pm.expect(response).to.have.property('items');",
									"    pm.expect(response).to.have.property('page');",
									"    pm.expect(response).to.have.property('pageSize');",
									"    pm.expect(response).to.have.property('totalCount');",
									"    pm.expect(response).to.have.property('totalPages');",
									"});",
									"",
									"// Test field selection",
									"pm.test(\"Only selected fields returned\", function () {",
									"    if (response.items.length > 0) {",
									"        const selectedItem = response.items[0];",
									"        const selectedFields = ['paymentId', 'amount'];",
									"        ",
									"        // Check that only selected fields exist",
									"        selectedFields.forEach(field => {",
									"            pm.expect(selectedItem).to.have.property(field);",
									"        });",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/orders/1/payments?select=paymentId,amount&page=1&pageSize=10",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"orders",
								"1",
								"payments"
							],
							"query": [
								{
									"key": "select",
									"value": "paymentId,amount"
								},
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "pageSize",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Payment By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test status code",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse response",
									"const response = pm.response.json();",
									"",
									"// Test response structure",
									"pm.test(\"Response has payment properties\", function () {",
									"    pm.expect(response).to.have.property('paymentId');",
									"    pm.expect(response).to.have.property('orderId');",
									"    pm.expect(response).to.have.property('amount');",
									"    pm.expect(response).to.have.property('paymentDate');",
									"    pm.expect(response).to.have.property('paymentMethod');",
									"});",
									"",
									"// Test actual data values",
									"pm.test(\"Payment has valid ID\", function () {",
									"    pm.expect(response.paymentId).to.be.a('number');",
									"    pm.expect(response.paymentId).to.be.above(0);",
									"});",
									"",
									"pm.test(\"Payment has valid amount\", function () {",
									"    pm.expect(response.amount).to.be.a('number');",
									"    pm.expect(response.amount).to.be.above(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/orders/1/payments/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"orders",
								"1",
								"payments",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Payment By ID - Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test status code",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/orders/1/payments/999999",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"orders",
								"1",
								"payments",
								"999999"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Payment - Authorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test status code",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// Parse response",
									"const response = pm.response.json();",
									"",
									"// Test response structure",
									"pm.test(\"Response has payment properties\", function () {",
									"    pm.expect(response).to.have.property('paymentId');",
									"    pm.expect(response).to.have.property('orderId');",
									"    pm.expect(response).to.have.property('amount');",
									"    pm.expect(response).to.have.property('paymentDate');",
									"    pm.expect(response).to.have.property('paymentMethod');",
									"});",
									"",
									"// Test actual data values",
									"pm.test(\"Payment created with correct values\", function () {",
									"    const requestBody = JSON.parse(pm.request.body.raw);",
									"    pm.expect(response.amount).to.eql(requestBody.amount);",
									"    pm.expect(response.paymentMethod).to.eql(requestBody.paymentMethod);",
									"});",
									"",
									"// Save payment ID for later tests",
									"pm.environment.set(\"paymentId\", response.paymentId);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"amount\": 25.99,\n  \"paymentDate\": \"{{$isoTimestamp}}\",\n  \"paymentMethod\": \"Credit Card\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/orders/1/payments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"orders",
								"1",
								"payments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Payment - Unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test status code",
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"amount\": 25.99,\n  \"paymentDate\": \"{{$isoTimestamp}}\",\n  \"paymentMethod\": \"Credit Card\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/orders/1/payments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"orders",
								"1",
								"payments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Payment - Invalid Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test status code",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"amount\": -5.00,\n  \"paymentDate\": \"invalid-date\",\n  \"paymentMethod\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/orders/1/payments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"orders",
								"1",
								"payments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Payment - Authorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test status code",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse response",
									"const response = pm.response.json();",
									"",
									"// Test response structure",
									"pm.test(\"Response has payment properties\", function () {",
									"    pm.expect(response).to.have.property('paymentId');",
									"    pm.expect(response).to.have.property('orderId');",
									"    pm.expect(response).to.have.property('amount');",
									"    pm.expect(response).to.have.property('paymentDate');",
									"    pm.expect(response).to.have.property('paymentMethod');",
									"});",
									"",
									"// Test actual data values",
									"pm.test(\"Payment updated with correct values\", function () {",
									"    const requestBody = JSON.parse(pm.request.body.raw);",
									"    pm.expect(response.amount).to.eql(requestBody.amount);",
									"    pm.expect(response.paymentMethod).to.eql(requestBody.paymentMethod);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"paymentId\": {{paymentId}},\n  \"amount\": 35.99,\n  \"paymentDate\": \"{{$isoTimestamp}}\",\n  \"paymentMethod\": \"PayPal\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/orders/1/payments/{{paymentId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"orders",
								"1",
								"payments",
								"{{paymentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Payment - Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test status code",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"paymentId\": 999999,\n  \"amount\": 35.99,\n  \"paymentDate\": \"{{$isoTimestamp}}\",\n  \"paymentMethod\": \"PayPal\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/orders/1/payments/999999",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"orders",
								"1",
								"payments",
								"999999"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Payment - Authorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test status code",
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"// Clear payment ID",
									"pm.environment.unset(\"paymentId\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/orders/1/payments/{{paymentId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"orders",
								"1",
								"payments",
								"{{paymentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Payment - Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test status code",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/orders/1/payments/999999",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"orders",
								"1",
								"payments",
								"999999"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Edge Cases",
			"item": [
				{
					"name": "Get Products - Empty Results",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test status code",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse response",
									"const response = pm.response.json();",
									"",
									"// Test response structure",
									"pm.test(\"Response has paged structure\", function () {",
									"    pm.expect(response).to.have.property('items');",
									"    pm.expect(response).to.have.property('page');",
									"    pm.expect(response).to.have.property('pageSize');",
									"    pm.expect(response).to.have.property('totalCount');",
									"    pm.expect(response).to.have.property('totalPages');",
									"});",
									"",
									"// Test empty results",
									"pm.test(\"Empty results handled correctly\", function () {",
									"    // Even with no results, structure should be valid",
									"    pm.expect(response.items).to.be.an('array');",
									"    pm.expect(response.totalCount).to.eql(0);",
									"    pm.expect(response.totalPages).to.eql(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/products?search=nonexistentitem12345&page=1&pageSize=10",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"products"
							],
							"query": [
								{
									"key": "search",
									"value": "nonexistentitem12345"
								},
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "pageSize",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Products - Out of Bound Page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test status code",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse response",
									"const response = pm.response.json();",
									"",
									"// Test response structure",
									"pm.test(\"Response has paged structure\", function () {",
									"    pm.expect(response).to.have.property('items');",
									"    pm.expect(response).to.have.property('page');",
									"    pm.expect(response).to.have.property('pageSize');",
									"    pm.expect(response).to.have.property('totalCount');",
									"    pm.expect(response).to.have.property('totalPages');",
									"});",
									"",
									"// Test out of bound page handling",
									"pm.test(\"Out of bound page handled correctly\", function () {",
									"    // Should return empty items array but maintain structure",
									"    pm.expect(response.items).to.be.an('array');",
									"    pm.expect(response.items.length).to.eql(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/products?page=999999&pageSize=10",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"products"
							],
							"query": [
								{
									"key": "page",
									"value": "999999"
								},
								{
									"key": "pageSize",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Products - Invalid Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test status code",
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer invalid_token_12345",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/products",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Product - Validation Error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test status code",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Test error response structure",
									"pm.test(\"Error response has validation details\", function () {",
									"    const response = pm.response.json();",
									"    // Depending on implementation, validation errors might be in different formats",
									"    // This is a general check that something is returned",
									"    pm.expect(response).to.exist;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"\",\n  \"description\": \"Product with invalid data\",\n  \"price\": -5.00,\n  \"isActive\": true,\n  \"categoryId\": 0\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/products",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"products"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}