{
  "info": {
    "name": "PRN232 Lab2 CoffeeStore API",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "description": "Automated tests for CoffeeStore REST API covering auth, CRUD, paging, sorting, field selection, and edge cases."
  },
  "item": [
    {
      "name": "Auth",
      "item": [
        {
          "name": "Register",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/auth/register",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "auth",
                "register"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{email}}\",\n  \"password\": \"{{password}}\",\n  \"fullName\": \"Test User\"\n}"
            },
            "description": "Registers a new user and captures access/refresh tokens."
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const email = `user_${Date.now()}@coffeestore.com`;",
                  "pm.environment.set('email', email);",
                  "pm.environment.set('password', 'Password@123');"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status is 200', () => pm.response.to.have.status(200));",
                  "const json = pm.response.json();",
                  "pm.test('Register succeeded', () => pm.expect(json.succeeded).to.be.true);",
                  "pm.environment.set('accessToken', json.accessToken);",
                  "pm.environment.set('refreshToken', json.refreshToken);",
                  "pm.environment.set('accessTokenExpiration', json.accessTokenExpiration);"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Login",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/auth/login",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "auth",
                "login"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{email}}\",\n  \"password\": \"{{password}}\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status is 200', () => pm.response.to.have.status(200));",
                  "const json = pm.response.json();",
                  "pm.test('Login succeeded', () => pm.expect(json.succeeded).to.be.true);",
                  "pm.environment.set('accessToken', json.accessToken);",
                  "pm.environment.set('refreshToken', json.refreshToken);",
                  "pm.environment.set('accessTokenExpiration', json.accessTokenExpiration);"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Refresh Token",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/auth/refresh",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "auth",
                "refresh"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"accessToken\": \"{{accessToken}}\",\n  \"refreshToken\": \"{{refreshToken}}\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status is 200', () => pm.response.to.have.status(200));",
                  "const json = pm.response.json();",
                  "pm.test('Refresh succeeded', () => pm.expect(json.succeeded).to.be.true);",
                  "pm.environment.set('accessToken', json.accessToken);",
                  "pm.environment.set('refreshToken', json.refreshToken);",
                  "pm.environment.set('accessTokenExpiration', json.accessTokenExpiration);"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Logout",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/auth/logout",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "auth",
                "logout"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"accessToken\": \"{{accessToken}}\",\n  \"refreshToken\": \"{{refreshToken}}\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status is 204', () => pm.response.to.have.status(204));"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Categories",
      "item": [
        {
          "name": "Get Categories Paged",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/categories?page=1&pageSize=5&search=Category&sort=-createdDate&select=CategoryId,Name",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "categories"
              ],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "pageSize",
                  "value": "5"
                },
                {
                  "key": "search",
                  "value": "Category"
                },
                {
                  "key": "sort",
                  "value": "-createdDate"
                },
                {
                  "key": "select",
                  "value": "CategoryId,Name"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status is 200', () => pm.response.to.have.status(200));",
                  "const json = pm.response.json();",
                  "pm.test('Has paging metadata', () => pm.expect(json).to.include.keys('page', 'pageSize', 'totalCount', 'totalPages'));",
                  "pm.test('Items contain only selected fields', () => { json.items.forEach(item => pm.expect(Object.keys(item)).to.deep.equal(['CategoryId', 'Name'])); });"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Create Category",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/categories",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "categories"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Automation Category\",\n  \"description\": \"Created via Postman collection\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status is 201', () => pm.response.to.have.status(201));",
                  "const json = pm.response.json();",
                  "pm.environment.set('categoryId', json.categoryId);",
                  "pm.test('Category name matches', () => pm.expect(json.name).to.eql('Automation Category'));"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Update Category",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/categories/{{categoryId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "categories",
                "{{categoryId}}"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Automation Category Updated\",\n  \"description\": \"Updated description\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status is 200', () => pm.response.to.have.status(200));",
                  "const json = pm.response.json();",
                  "pm.test('Category updated', () => pm.expect(json.name).to.eql('Automation Category Updated'));"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Delete Category",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/categories/{{categoryId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "categories",
                "{{categoryId}}"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status is 204', () => pm.response.to.have.status(204));"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Products",
      "item": [
        {
          "name": "Create Product",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/products",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "products"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Automation Product\",\n  \"description\": \"Created via Postman\",\n  \"price\": 9.99,\n  \"isActive\": true,\n  \"categoryId\": {{categoryId}}\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status is 201', () => pm.response.to.have.status(201));",
                  "const json = pm.response.json();",
                  "pm.environment.set('productId', json.productId);",
                  "pm.test('Product created', () => pm.expect(json.name).to.eql('Automation Product'));"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Products with Select",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/products?page=1&pageSize=3&sort=price&select=ProductId,Name,Price",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "products"
              ],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "pageSize",
                  "value": "3"
                },
                {
                  "key": "sort",
                  "value": "price"
                },
                {
                  "key": "select",
                  "value": "ProductId,Name,Price"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status is 200', () => pm.response.to.have.status(200));",
                  "const json = pm.response.json();",
                  "pm.test('Items contain selected fields', () => { json.items.forEach(item => pm.expect(Object.keys(item)).to.deep.equal(['ProductId', 'Name', 'Price'])); });"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Orders",
      "item": [
        {
          "name": "Create Order",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/orders",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "orders"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userId\": \"{{email}}\",\n  \"orderDate\": \"{{orderDate}}\",\n  \"status\": \"Processing\",\n  \"details\": [\n    {\n      \"productId\": {{productId}},\n      \"quantity\": 2,\n      \"unitPrice\": 9.99\n    }\n  ],\n  \"payment\": {\n    \"amount\": 19.98,\n    \"paymentDate\": \"{{orderDate}}\",\n    \"paymentMethod\": \"Credit Card\"\n  }\n}"
            }
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "pm.environment.set('orderDate', new Date().toISOString());"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status is 201', () => pm.response.to.have.status(201));",
                  "const json = pm.response.json();",
                  "pm.environment.set('orderId', json.orderId);",
                  "pm.environment.set('paymentId', json.payment?.paymentId || 0);"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Orders Paged",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/orders?page=1&pageSize=2&sort=-orderDate",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "orders"
              ],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "pageSize",
                  "value": "2"
                },
                {
                  "key": "sort",
                  "value": "-orderDate"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status is 200', () => pm.response.to.have.status(200));",
                  "const json = pm.response.json();",
                  "pm.test('Total pages present', () => pm.expect(json.totalPages).to.be.at.least(1));"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Payments",
      "item": [
        {
          "name": "Get Payments by Order",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/orders/{{orderId}}/payments?page=1&pageSize=5",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "orders",
                "{{orderId}}",
                "payments"
              ],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "pageSize",
                  "value": "5"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status is 200', () => pm.response.to.have.status(200));",
                  "const json = pm.response.json();",
                  "pm.test('Payments items exist', () => pm.expect(json.items.length).to.be.at.least(1));"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Edge Cases",
      "item": [
        {
          "name": "Unauthorized Access",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/products",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "products"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Returns 401 without token', () => pm.response.to.have.status(401));"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Paging Out of Range",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/categories?page=999&pageSize=5",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "categories"
              ],
              "query": [
                {
                  "key": "page",
                  "value": "999"
                },
                {
                  "key": "pageSize",
                  "value": "5"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status is 200 for out-of-range page', () => pm.response.to.have.status(200));",
                  "const json = pm.response.json();",
                  "pm.test('Empty items for out-of-range page', () => pm.expect(json.items.length).to.eql(0));"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    }
  ],
  "event": [],
  "variable": [
    {
      "key": "baseUrl",
      "value": "https://localhost:5001"
    },
    {
      "key": "email",
      "value": ""
    },
    {
      "key": "password",
      "value": "Password@123"
    },
    {
      "key": "accessToken",
      "value": ""
    },
    {
      "key": "refreshToken",
      "value": ""
    },
    {
      "key": "categoryId",
      "value": "0"
    },
    {
      "key": "productId",
      "value": "0"
    },
    {
      "key": "orderId",
      "value": "0"
    },
    {
      "key": "paymentId",
      "value": "0"
    }
  ]
}
